

sync(delta, view) {
  
  view.getRow from delta.rowid -> row

  for each property in delta
    update row value

  tell view to trigger its update subscribers:
    view.deltaqueue add delta;
    view.trigger (update);
}

===== remove =====

1. remove([ids]) is called

  for each id in ids
    
    remove the row
    remove the row cache data
    generate a delta
      (the old will be the full row, the changed will be complete
       empty)
    put delta in queue
    
    if not silent
      this.triggers remove
      
2. trigger fires and does the following
  
  for each "remove" subscriber -> subscriber
    for each delta in the queue

===== update ======

1. update(someData) is called
  
  update on data is performed
  delta is built
  delta is put in queue

  if not silent
    this.triggers update

2. trigger fires and does the following:

  for each "update" subscriber -> subscriber
    for each delta item in the queue -> delta

      if subscriber.range
        if (delta within subscriber.range)
          
          call subscriber.callback
            (which should basically take the delta and update
             the view's data and trigger its update)
    


