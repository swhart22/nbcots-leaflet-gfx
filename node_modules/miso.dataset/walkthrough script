
// Creating a new dataset:
var ds = new Miso.Dataset({
  data: { columns : [  
    { name : "one",   data : [1, 2, 3, 4, 5, 6, 7, 8, 9] },
    { name : "two",   data : [4, 5, 6, 7, 8, 9, 10, 11, 12] },
    { name : "three", data : [7, 8, 9, 10, 11, 12, 13, 14, 15] } 
  ] },
  strict: true
});

// Fetching:

// 1.
ds.fetch();

// 2.
ds.fetch({ success : function() {
  console.log("fetched", this);
}});

// 3.
_.when(ds.fetch()).then(function() {
  console.log("fetched", ds);  
});

// Any url:
var ds = new Miso.Dataset({ 
  url : "data/alphabet_obj.json?callback=", 
  jsonp : true, 
  extract: function(raw) {
    return raw.data;
  },
  ready : function() {
    console.log("I'm ready!");
  }
});

ds.fetch();

// Google Spreadsheet url:
// https://docs.google.com/spreadsheet/pub?key=0Asnl0xYK7V16dFpFVmZUUy1taXdFbUJGdGtVdFBXbFE&output=html
ds = new Miso.Dataset({
  importer: Miso.Importers.GoogleSpreadsheet,
  parser : Miso.Parsers.GoogleSpreadsheet,
  key : "0Asnl0xYK7V16dFpFVmZUUy1taXdFbUJGdGtVdFBXbFE",
  worksheet: "1"
});

_.when(ds.fetch()).then(function() {
  console.log("fetched", ds);
});

// A Column:
{ 
  _id  : 1105, 
  name : "What,",
  type : "string",
  data : ["a lot of words","a lot of words",null,"•̥̑.̮•̥̑  •̴̑.̶̥•̴̑  •̥̑.̰•̥̑",null,null,"a lot of words"]
}

// Things you can do on a column:

// coerces the entire column to the type its set to.
// .coerce
var m = new Miso.Column({
  id : 1,
  name : "dates",
  type : "time",
  format : "MM/YYYY DD",
  data : ["12/2010 24", "04/2010 30"]
});
m.data;
m.coerce();
m.data;

// gets various stats on the column
//   .max
//   .min
//   .mean
//   .median
m.min();
m.max();
m.median();
m.mean();

m.toNumeric(moment());
m.numericAt(1);

var m = new Miso.Column({
  id : 1,
  name : "values",
  type : "number",
  data : ["10","20","30","40","50","60"]
});
m.data;
m.coerce();
m.data;

m.sum();

// dataset wide selections
var ds = new Miso.Dataset({
  data: { columns : [  
    { name : "one",   data : [1, 2, 3, 4,  5,  6,  7,  8,  9] },
    { name : "two",   data : [4, 5, 6, 7,  8,  9,  10, 11, 12] },
    { name : "three", data : [7, 8, 9, 10, 11, 12, 13, 14, 15] } 
  ] },
  strict: true
});

_.when(ds.fetch()).then(function() {

  // get first row.
  var rowId = ds._columns[0].data[0];  
  var subds = ds.where({
    rows : [rowId]
  });
  console.log("new dataset length", subds.length);
  subds.each(function(row, i) {
    console.log("Row " + i, row);
  });

  // all rows where the "two" column values are even
  subds = ds.where({
    rows : function(row) {
      return row.two % 2 === 0;
    }
  });

  console.log("new dataset length", subds.length);
  subds.each(function(row, i) {
    console.log("Row " + i, row);
  });
});

// Sorting
ds = new Miso.Dataset({
  data: { columns : [ 
    { name : "one",   data : [10, 2, 3, 14, 3, 4] },
    { name : "two",   data : [4,  5, 6, 1,  1, 1] },
    { name : "three", data : [7,  8, 9, 1,  1, 1] } 
  ] },
  comparator : function(r1, r2) {
    if (r1.one > r2.one) { return 1; }
    if (r1.one < r2.one) { return -1; }
    return 0;
  },
  strict: true
});

_.when(ds.fetch()).then(function(){
  console.log(ds.column("one").data);
  console.log(ds.column("two").data);
  console.log(ds.column("three").data);
});

// adding rows into sorted dataset

ds.add({
  one : 1,
  two : 1, 
  three : 1
});

console.log(ds.column("one").data);
console.log(ds.column("two").data);
console.log(ds.column("three").data);

ds.add({
  one : 8,
  two : 8, 
  three : 8
});

console.log(ds.column("one").data);
console.log(ds.column("two").data);
console.log(ds.column("three").data);

// syncing datasets!
ds = new Miso.Dataset({
  data: { columns : [ 
    { name : "one",   data : [10, 2, 3, 14, 3, 4] },
    { name : "two",   data : [4,  5, 6, 1,  1, 1] },
    { name : "three", data : [7,  8, 9, 1,  1, 1] } 
  ] },
  strict: true,
  sync: true
});

_.when(ds.fetch()).then(function() {
  ds.bind("change", function(e) {
    console.log("FIRED CHANGE");
    console.log("Is add?", Miso.Event.isAdd(e.deltas[0]));
    console.log("Is delete?", Miso.Event.isDelete(e.deltas[0]));
    console.log("Is update?", Miso.Event.isUpdate(e.deltas[0]));
  });

  ds.bind("update", function(e) {
    console.log("FIRED UPDATE");
    console.log(ds.column("one").data);
    console.log(ds.column("two").data);
    console.log(ds.column("three").data);
  });

  ds.bind("add", function(e) {
    console.log("FIRED ADD");
    console.log(ds.column("one").data);
    console.log(ds.column("two").data);
    console.log(ds.column("three").data);
  });

  ds.add({
    one : 18,
    two : 18, 
    three : 18
  });  

  ds.update(ds._columns[0].data[0], {
    one : 180,
    two : 180, 
    three : 180
  });
});

// Products
// We saw min and max on columns, what about min/max on multiple colunmns? How do we 
// subscribe to those?

var min = ds.min(["one","two", "three"]);
min.val();

min.bind("change", function() {
  console.log("MIN CHANGED", this.val());
});

ds.add({
  one : -1, 
  two : -1, 
  three : -1
});


// Problem : If the dataset isn't syncable, having to call .val() is a bit overkill
// so we bypass it. This does however create inconsistancy.
ds = new Miso.Dataset({
  data: { columns : [ 
    { name : "one",   data : [10, 2, 3, 14, 3, 4] },
    { name : "two",   data : [4,  5, 6, 1,  1, 1] },
    { name : "three", data : [7,  8, 9, 1,  1, 1] } 
  ] },
  strict: true
  // note NO sync: true
});
ds.fetch({
  success : function() {
    console.log("Note how this is not an object: ", this.min(["one","two", "three"]));
  }
});
